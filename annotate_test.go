package annotations

import (
	"bytes"
	"io"
	"os"
	"sync"
	"testing"
)

func TestProcess(t *testing.T) {
	Options()
	*Option.Dir = "testdata/samples"
	*Option.Verbose = false
	*Option.AbortOnError = false
	*Option.OutputToStdOutOnly = true

	actual := readStandardOutput(Process)

	expected := `// Code generated by WishGen. DO NOT EDIT.
// Source: testdata/samples/sample.go
package sample
func (s *SomeStruct)SetAge(v int) {
	s.age = v
}
func (s *SomeStruct)SetName(v string) {
	s.name = v
}
func (s *SomeStruct)Age() int {
	return s.age
}
func (s *SomeStruct)Name() string {
	return s.name
}
func (s *AnotherStruct)SetName(v string) {
	s.name = v
}
func (s *SomeTypeForFluent)SetAge(v int) *SomeTypeForFluent {
	s.age = v
	return s
}
func (s *SomeTypeForFluent)SetName(v string) *SomeTypeForFluent {
	s.name = v
	return s
}
`

	if expected != actual {
		t.Error("Test failed. Expected and Actual are not same.")
		t.Logf("Expected: [%s]", expected)
		t.Logf("Actual  : [%s]", actual)
		return
	}
}

func readStandardOutput(method func()) string {
	origStdOut := os.Stdout
	// Trap stdout
	r, w, err := os.Pipe()
	if err != nil {
		panic("Cant test because pipe can not be created. Error:" + err.Error())
	}
	os.Stdout = w
	revert := func() {
		os.Stdout = origStdOut
	}
	var wg sync.WaitGroup
	outChannel := make(chan string)
	wg.Add(1)
	go func(wg *sync.WaitGroup) {
		var buf bytes.Buffer
		wg.Done()
		_, _ = io.Copy(&buf, r)
		outChannel <- buf.String()
	}(&wg)
	wg.Wait()
	method()
	_ = w.Close()
	revert()
	return <-outChannel
}
